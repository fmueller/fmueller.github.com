<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Cup of Java]]></title>
  <link href="http://cupofjava.de/atom.xml" rel="self"/>
  <link href="http://cupofjava.de/"/>
  <updated>2012-11-10T18:26:13+01:00</updated>
  <id>http://cupofjava.de/</id>
  <author>
    <name><![CDATA[Felix MÃ¼ller]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Integration Tests with MongoDB and Play Framework 2]]></title>
    <link href="http://cupofjava.de/blog/2012/11/09/integration-tests-with-mongodb-and-play-framework-2/"/>
    <updated>2012-11-09T09:45:00+01:00</updated>
    <id>http://cupofjava.de/blog/2012/11/09/integration-tests-with-mongodb-and-play-framework-2</id>
    <content type="html"><![CDATA[<p>In of my projects I am building a rest api with the playframework 2 (using the java api) and MongoDB as the persistence storage. One of the first question that arises was: how can I implement integration tests properly with a test instance of MongoDB? I wanted to have a known state in MongoDB for each test and it should be easy to set up the test instance. <!-- more --></p>

<p>I looked for projects on github that supports my requirements and came up with these three possibilities:</p>

<ul>
<li><a href="https://github.com/thiloplanz/jmockmongo"><strong>jmockmongo</strong></a> This is a mock implementation of the MongoDB protocol and works purely in-memory.</li>
<li><a href="https://github.com/lordofthejars/nosql-unit"><strong>nosqlunit</strong></a> This library offers more features than jmockmongo. You can use it to test several nosql stores and configure data sets for your tests. For testing MongoDB it uses jmockmongo under the hood. You can also use a local or remote running MongoDB instance for your tests if the in-memory approach does not suit your needs.</li>
<li><a href="https://github.com/flapdoodle-oss/embedmongo.flapdoodle.de"><strong>embedmongo</strong></a> With embedmongo you get a platform independent way of running local MongoDB instances. It provides helper classes to bootstrap MongoDB during tests. The most important feature imho: You do not need to install MongoDB. embedmongo downloads MongoDB automatically for windows, linux and mac when bootstraping your tests.</li>
</ul>


<p>Because I wanted a running MongoDB instance and no in-memory solution I finally chose embedmongo. There is a nice helper class which lets you easily setup a MongoDB on a free port of your system. You can also choose the version.</p>

<figure class='code'><figcaption><span>Bootstrap local MongoDB instance with embedmongo</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="k">new</span> <span class="nf">MongodForTestsFactory</span><span class="o">().</span><span class="na">with</span><span class="o">(</span><span class="n">Version</span><span class="o">.</span><span class="na">V2_2_0</span><span class="o">).</span><span class="na">newMongo</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>Furthermore I had the needs to integrate the MongoDB test instance into the lifecycle of Play. In Play one typically uses a fake instance for proper integration tests.</p>

<figure class='code'><figcaption><span>Functional test in Play 2 with a fake application</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">running</span><span class="o">(</span><span class="n">fakeApplication</span><span class="o">(),</span> <span class="k">new</span> <span class="n">Runnable</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">// here you insert your test code</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>One can intercept the bootstrap of a Play 2 application with a so called Global object that is placed in the default package (or another package that you have configured in the application.conf). There you can override methods that are called from Play during start and shutdown of your application. The perfect place to bootstrap your own MongoDB instance.</p>

<figure class='code'><figcaption><span>Automatically bootstrap of local MongoDB instance in Play 2</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">import</span> <span class="nn">com.mongodb.Mongo</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">de.flapdoodle.embed.mongo.distribution.Version</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">de.flapdoodle.embed.mongo.tests.MongodForTestsFactory</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">play.Application</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">play.GlobalSettings</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">play.Logger</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.io.IOException</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Global</span> <span class="kd">extends</span> <span class="n">GlobalSettings</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="n">MongodForTestsFactory</span> <span class="n">mongodForTestsFactory</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onStart</span><span class="o">(</span><span class="n">Application</span> <span class="n">application</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">application</span><span class="o">.</span><span class="na">isProd</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>            <span class="cm">/*</span>
</span><span class='line'><span class="cm">             * here you can setup mongodb for production,</span>
</span><span class='line'><span class="cm">             * e.g. connect to remote mongodb instance</span>
</span><span class='line'><span class="cm">             */</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">startLocalMongoInstance</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onStop</span><span class="o">(</span><span class="n">Application</span> <span class="n">application</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">mongodForTestsFactory</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">Logger</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">&quot;Shutdown local mongo instance...&quot;</span><span class="o">);</span>
</span><span class='line'>            <span class="n">mongodForTestsFactory</span><span class="o">.</span><span class="na">shutdown</span><span class="o">();</span>
</span><span class='line'>            <span class="n">Logger</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">&quot;Local mongo instance was stopped&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kt">void</span> <span class="nf">startLocalMongoInstance</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">Logger</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">&quot;Start local mongo instance...&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">mongodForTestsFactory</span> <span class="o">=</span> <span class="k">new</span> <span class="n">MongodForTestsFactory</span><span class="o">();</span>
</span><span class='line'>            <span class="n">Mongo</span> <span class="n">mongo</span> <span class="o">=</span> <span class="n">mongodForTestsFactory</span><span class="o">.</span><span class="na">with</span><span class="o">(</span><span class="n">Version</span><span class="o">.</span><span class="na">V2_2_0</span><span class="o">).</span><span class="na">newMongo</span><span class="o">();</span>
</span><span class='line'>            <span class="c1">// that&#39;s it: now you&#39;ve got the local mongo instance</span>
</span><span class='line'>            <span class="n">Logger</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">&quot;Local mongo instance was successfully started&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">IOException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">Logger</span><span class="o">.</span><span class="na">error</span><span class="o">(</span><span class="s">&quot;Unable to start local mongo instance&quot;</span><span class="o">,</span> <span class="n">e</span><span class="o">);</span>
</span><span class='line'>            <span class="k">throw</span> <span class="k">new</span> <span class="nf">RuntimeException</span><span class="o">(</span><span class="n">e</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This solution starts a MongoDB instance each time you start Play in development mode and for each test where you start a fake application. In production you typically connect to a remote MongoDB instance or cluster.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello Internet!]]></title>
    <link href="http://cupofjava.de/blog/2012/11/02/hello-internet/"/>
    <updated>2012-11-02T18:08:00+01:00</updated>
    <id>http://cupofjava.de/blog/2012/11/02/hello-internet</id>
    <content type="html"><![CDATA[<p>Today I decided spontaneously to start my own blog. Most times I will blog about technology and programming: the things that tackles me. What that could be you may find on the <a href="http://cupofjava.de/about">about</a> site.</p>

<p>And sorry for the oh so funny title of this first blog post. I did not find a better one. ;-)</p>

<p>So far so good. I hope you will enjoy the content.</p>
]]></content>
  </entry>
  
</feed>
