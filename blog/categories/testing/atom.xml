<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: testing | Cup of Java]]></title>
  <link href="http://cupofjava.de/blog/categories/testing/atom.xml" rel="self"/>
  <link href="http://cupofjava.de/"/>
  <updated>2013-10-24T17:00:12+02:00</updated>
  <id>http://cupofjava.de/</id>
  <author>
    <name><![CDATA[Felix MÃ¼ller]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Fast and reliable integration tests with Play 2]]></title>
    <link href="http://cupofjava.de/blog/2012/12/21/fast-and-reliable-integration-tests-with-play-2/"/>
    <updated>2012-12-21T11:49:00+01:00</updated>
    <id>http://cupofjava.de/blog/2012/12/21/fast-and-reliable-integration-tests-with-play-2</id>
    <content type="html"><![CDATA[<p>When you start using the Play Framework 2 you will notice that there are a bunch of test helpers and entry points to set up your tests. That's great! One might thinks that's too good to be true. And in fact, when using the <code>FakeApplication</code> test helper you can run into subtle problems which cause unreliable tests. <!-- more --></p>

<p>In the <a href="http://www.playframework.org/documentation/2.0/JavaTest">Play Framework documentation</a> they show you that it is quite easy to set up a test with a <code>FakeApplication</code> by the following code snippet:</p>

<p>```java Example of FakeApplication usage in Play Framework documentation
@Test
public void findById() {
  running(fakeApplication(), new Runnable() {</p>

<pre><code>public void run() {
  Computer macintosh = Computer.find.byId(21l);
  assertThat(macintosh.name).isEqualTo("Macintosh");
  assertThat(formatted(macintosh.introduced)).isEqualTo("1984-01-24");
}
</code></pre>

<p>  });
}
```</p>

<p>So, you might think when you have many test methods you just copy this pattern and everything is fine. But that is not the case!</p>

<p>```java Pattern of FakeApplication per test method
@Test
public void testOne() {
  running(fakeApplication(), new Runnable() {</p>

<pre><code>public void run() {
  // test logic
}
</code></pre>

<p>  });
}</p>

<p>@Test
public void testTwo() {
  running(fakeApplication(), new Runnable() {</p>

<pre><code>public void run() {
  // test logic
}
</code></pre>

<p>  });
}
```</p>

<p>Here are two examples that <code>FakeApplication</code> can be difficult to use:</p>

<ul>
<li><a href="https://groups.google.com/forum/#!searchin/play-framework/fakeApplication/play-framework/zcpdOL61xXQ/5cUH-HKf1okJ">(Play-Scala 2.0.4) FakeApplication onStop not being called after Test</a></li>
<li><a href="https://groups.google.com/forum/#!msg/play-framework/0Ld889ARC8o/mYcrMeX2dsYJ">[play 2.0.3] Two fakeApplication tests only one will succeed but the other throws error 500</a></li>
</ul>


<p>I ran into the same problems that are mentioned in the first mailinglist posting. In the <a href="http://cupofjava.de/blog/2012/11/09/integration-tests-with-mongodb-and-play-framework-2/">project where I'm using MongoDB together with Play 2</a> the tests with a <code>FakeApplication</code> started to become unreliable. There were issues with cleaning up test data after and before each test method. Also the shutdown and restart of a <code>FakeApplication</code> was sometimes error prone.</p>

<p>The best solution for this problems is to start one <code>FakeApplication</code> per test class, not per test method. Here is the test helper class that I use for this:</p>

<p>```java One FakeApplication per test class
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;
import play.test.FakeApplication;</p>

<p>import static play.test.Helpers.*;</p>

<p>public abstract class AbstractOneFakeApplicationIntegrationTest {</p>

<pre><code>private static FakeApplication fakeApplication;

@BeforeClass
public static void startFakeApplication() {
    fakeApplication = fakeApplication();
    start(fakeApplication);
}

@AfterClass
public static void shutdownFakeApplication() {
    stop(fakeApplication);
}
</code></pre>

<p>}</p>

<p>```</p>

<p>You only need to inherit from it and every test has access to a running <code>FakeApplication</code>. One disadvantage is that you have more work to clean up any data that is written for your tests into databases, filesystem or any other persistent system. But you get <strong>reliable integration tests</strong> and the tests are <strong>much faster</strong> because you only start one <code>FakeApplication</code> per class and not dozens of them as in the per method approach</p>

<p>Beside this little issues that <code>FakeApplication</code> can cause Play 2 offers great testing support.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Embedded Elasticsearch Server for Tests]]></title>
    <link href="http://cupofjava.de/blog/2012/11/27/embedded-elasticsearch-server-for-tests/"/>
    <updated>2012-11-27T12:31:00+01:00</updated>
    <id>http://cupofjava.de/blog/2012/11/27/embedded-elasticsearch-server-for-tests</id>
    <content type="html"><![CDATA[<p>When developing with elasticsearch one of the first problems is how to get tests in place that use a fast server instance. It should be easily embeddable in your tests and reliable. <!-- more --></p>

<p>Therefore, you have to take care of two things: disable the http module because you do not want to have network communication in your tests and configure a writable data directory. You could also use elasticsearch with full in-memory mode but this is not as stable as you may think. Just let Lucene write on disk in a temporary directory.</p>

<p>```java Example of an embedded elasticsearch server
public class EmbeddedElasticsearchServer {</p>

<pre><code>private static final String DEFAULT_DATA_DIRECTORY = "target/elasticsearch-data";

private final Node node;
private final String dataDirectory;

public EmbeddedElasticsearchServer() {
    this(DEFAULT_DATA_DIRECTORY);
}

public EmbeddedElasticsearchServer(String dataDirectory) {
    this.dataDirectory = dataDirectory;

    ImmutableSettings.Builder elasticsearchSettings = ImmutableSettings.settingsBuilder()
            .put("http.enabled", "false")
            .put("path.data", dataDirectory);

    node = nodeBuilder()
            .local(true)
            .settings(elasticsearchSettings.build())
            .node();
}

public Client getClient() {
    return node.client();
}

public void shutdown() {
    node.close();
    deleteDataDirectory();
}

private void deleteDataDirectory() {
    try {
        FileUtils.deleteDirectory(new File(dataDirectory));
    } catch (IOException e) {
        throw new RuntimeException("Could not delete data directory of embedded elasticsearch server", e);
    }
}
</code></pre>

<p>}
```</p>

<p>By using <code>getClient</code> you can get access to the embedded server. And as you can see the data directory is deleted when the embedded elasticsearch server will be stopped. With this class available you can write an abstract test helper class for your test infrastructure.</p>

<p>```java Test helper class for an embedded elasticsearch server per test
public abstract class AbstractElasticsearchIntegrationTest {</p>

<pre><code>private EmbeddedElasticsearchServer embeddedElasticsearchServer;

@Before
public void startEmbeddedElasticsearchServer() {
    embeddedElasticsearchServer = new EmbeddedElasticsearchServer();
}

@After
public void shutdownEmbeddedElasticsearchServer() {
    embeddedElasticsearchServer.shutdown();
}

protected Client getClient() {
    return embeddedElasticsearchServer.getClient();
}
</code></pre>

<p>}
```</p>

<p>You can find a full example there: <a href="https://github.com/fmueller/elasticsearch-integration-test">elasticsearch-integration-test</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Integration Tests with MongoDB and Play Framework 2]]></title>
    <link href="http://cupofjava.de/blog/2012/11/09/integration-tests-with-mongodb-and-play-framework-2/"/>
    <updated>2012-11-09T09:45:00+01:00</updated>
    <id>http://cupofjava.de/blog/2012/11/09/integration-tests-with-mongodb-and-play-framework-2</id>
    <content type="html"><![CDATA[<p>In of my projects I am building a rest api with the playframework 2 (using the java api) and MongoDB as the persistence storage. One of the first question that arises was: how can I implement integration tests properly with a test instance of MongoDB? I wanted to have a known state in MongoDB for each test and it should be easy to set up the test instance. <!-- more --></p>

<p>I looked for projects on github that supports my requirements and came up with these three possibilities:</p>

<ul>
<li><a href="https://github.com/thiloplanz/jmockmongo"><strong>jmockmongo</strong></a> This is a mock implementation of the MongoDB protocol and works purely in-memory.</li>
<li><a href="https://github.com/lordofthejars/nosql-unit"><strong>nosqlunit</strong></a> This library offers more features than jmockmongo. You can use it to test several nosql stores and configure data sets for your tests. For testing MongoDB it uses jmockmongo under the hood. You can also use a local or remote running MongoDB instance for your tests if the in-memory approach does not suit your needs.</li>
<li><a href="https://github.com/flapdoodle-oss/embedmongo.flapdoodle.de"><strong>embedmongo</strong></a> With embedmongo you get a platform independent way of running local MongoDB instances. It provides helper classes to bootstrap MongoDB during tests. The most important feature imho: You do not need to install MongoDB. embedmongo downloads MongoDB automatically for windows, linux and mac when bootstraping your tests.</li>
</ul>


<p>Because I wanted a running MongoDB instance and no in-memory solution I finally chose embedmongo. There is a nice helper class which lets you easily setup a MongoDB on a free port of your system. You can also choose the version.</p>

<p><code>java Bootstrap local MongoDB instance with embedmongo
new MongodForTestsFactory().with(Version.V2_2_0).newMongo();
</code></p>

<p>Furthermore I had the needs to integrate the MongoDB test instance into the lifecycle of Play. In Play one typically uses a fake instance for proper integration tests.</p>

<p>``` java Functional test in Play 2 with a fake application
running(fakeApplication(), new Runnable() {</p>

<pre><code>@Override
public void run() {
    // here you insert your test code
}
</code></pre>

<p>});
```</p>

<p>One can intercept the bootstrap of a Play 2 application with a so called Global object that is placed in the default package (or another package that you have configured in the application.conf). There you can override methods that are called from Play during start and shutdown of your application. The perfect place to bootstrap your own MongoDB instance.</p>

<p>``` java Automatically bootstrap of local MongoDB instance in Play 2
import com.mongodb.Mongo;
import de.flapdoodle.embed.mongo.distribution.Version;
import de.flapdoodle.embed.mongo.tests.MongodForTestsFactory;
import play.Application;
import play.GlobalSettings;
import play.Logger;</p>

<p>import java.io.IOException;</p>

<p>public class Global extends GlobalSettings {</p>

<pre><code>private MongodForTestsFactory mongodForTestsFactory;

@Override
public void onStart(Application application) {
    if (application.isProd()) {
        /*
         * here you can setup mongodb for production,
         * e.g. connect to remote mongodb instance
         */
    } else {
        startLocalMongoInstance();
    }
}

@Override
public void onStop(Application application) {
    if (mongodForTestsFactory != null) {
        Logger.info("Shutdown local mongo instance...");
        mongodForTestsFactory.shutdown();
        Logger.info("Local mongo instance was stopped");
    }
}

private void startLocalMongoInstance() {
    Logger.info("Start local mongo instance...");
    try {
        mongodForTestsFactory = new MongodForTestsFactory();
        Mongo mongo = mongodForTestsFactory.with(Version.V2_2_0).newMongo();
        // that's it: now you've got the local mongo instance
        Logger.info("Local mongo instance was successfully started");
    } catch (IOException e) {
        Logger.error("Unable to start local mongo instance", e);
        throw new RuntimeException(e);
    }
}
</code></pre>

<p>}
```
This solution starts a MongoDB instance each time you start Play in development mode and for each test where you start a fake application. In production you typically connect to a remote MongoDB instance or cluster.</p>
]]></content>
  </entry>
  
</feed>
